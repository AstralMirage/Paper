From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sun, 25 Jun 2023 23:10:14 -0700
Subject: [PATCH] Improve exact choice recipe ingredients

Fixes exact choices not working with recipe book clicks
and shapeless recipes.

== AT ==
public net.minecraft.world.item.ItemStackLinkedSet TYPE_AND_TAG

diff --git a/src/main/java/io/papermc/paper/inventory/recipe/RecipeBookExactChoiceRecipe.java b/src/main/java/io/papermc/paper/inventory/recipe/RecipeBookExactChoiceRecipe.java
new file mode 100644
index 0000000000000000000000000000000000000000..718de45be9eee1bff6aba85ad88fde5478964837
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/recipe/RecipeBookExactChoiceRecipe.java
@@ -0,0 +1,25 @@
+package io.papermc.paper.inventory.recipe;
+
+import net.minecraft.world.Container;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.Recipe;
+
+public abstract class RecipeBookExactChoiceRecipe<C extends Container> implements Recipe<C> {
+
+    private boolean hasExactIngredients;
+
+    protected final void checkExactIngredients() {
+        for (final Ingredient ingredient : this.getIngredients()) {
+            if (!ingredient.isEmpty() && ingredient.exact) {
+                this.hasExactIngredients = true;
+                return;
+            }
+        }
+        this.hasExactIngredients = false;
+    }
+
+    @Override
+    public final boolean hasExactIngredients() {
+        return this.hasExactIngredients;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java b/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..03648bc68cb4392de6338b85c5342fde9ca82348
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java
@@ -0,0 +1,71 @@
+package io.papermc.paper.inventory.recipe;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap;
+import java.util.IdentityHashMap;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.world.entity.player.StackedContents;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.ItemStackLinkedSet;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.Recipe;
+
+public final class StackedContentsExtraMap {
+
+    static final int[] EMPTY = new int[0];
+
+    private final AtomicInteger idCounter = new AtomicInteger(BuiltInRegistries.ITEM.size()); // start at max vanilla stacked contents idx
+    private final Object2IntMap<ItemStack> exactChoiceIds = new Object2IntOpenCustomHashMap<>(ItemStackLinkedSet.TYPE_AND_TAG);
+    private final Int2ObjectMap<ItemStack> idToExactChoice = new Int2ObjectOpenHashMap<>();
+    private final StackedContents contents;
+    public final Map<Ingredient, int[]> extraStackingIds = new IdentityHashMap<>();
+
+    public StackedContentsExtraMap(final StackedContents contents) {
+        this.exactChoiceIds.defaultReturnValue(-1);
+        this.contents = contents;
+    }
+
+    public StackedContentsExtraMap initialize(final Recipe<?> recipe) {
+        if (recipe.hasExactIngredients()) {
+            for (final Ingredient ingredient : recipe.getIngredients()) {
+                if (!ingredient.isEmpty() && ingredient.exact) {
+                    final net.minecraft.world.item.ItemStack[] items = ingredient.getItems();
+                    final int[] ids = new int[items.length];
+                    for (int i = 0; i < items.length; i++) {
+                        ids[i] = this.registerExact(items[i]); // I think not copying the stack here is safe because cb copies the stack when creating the ingredient
+                    }
+                    this.extraStackingIds.put(ingredient, ids);
+                }
+            }
+        }
+        return this;
+    }
+
+    private int registerExact(final ItemStack exactChoice) {
+        final int existing = this.exactChoiceIds.getInt(exactChoice);
+        if (existing > -1) {
+            return existing;
+        }
+        final int id = this.idCounter.getAndIncrement();
+        this.exactChoiceIds.put(exactChoice, id);
+        this.idToExactChoice.put(id, exactChoice);
+        return id;
+    }
+
+    public ItemStack getById(int id) {
+        return this.idToExactChoice.get(id);
+    }
+
+    public void accountStack(final ItemStack stack, final int count) {
+        if (!this.exactChoiceIds.isEmpty()) {
+            final int id = this.exactChoiceIds.getInt(stack);
+            if (id >= 0) {
+                this.contents.put(id, count);
+            }
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/inventory/recipe/package-info.java b/src/main/java/io/papermc/paper/inventory/recipe/package-info.java
new file mode 100644
index 0000000000000000000000000000000000000000..413dfa52760db393ad6a8b5341200ee704a864fc
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/recipe/package-info.java
@@ -0,0 +1,5 @@
+@DefaultQualifier(NonNull.class)
+package io.papermc.paper.inventory.recipe;
+
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
diff --git a/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java b/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
index c8e9e85728d6b60bb829e69c015ab3c5172afd54..86cc516a6d4e8c64497479ec128d4e8d73667cfa 100644
--- a/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
+++ b/src/main/java/net/minecraft/recipebook/ServerPlaceRecipe.java
@@ -33,6 +33,7 @@ public class ServerPlaceRecipe<C extends Container> implements PlaceRecipe<Integ
             this.inventory = entity.getInventory();
             if (this.testClearGrid() || entity.isCreative()) {
                 this.stackedContents.clear();
+                this.stackedContents.initialize(recipe); // Paper - better exact choice recipes
                 entity.getInventory().fillStackedContents(this.stackedContents);
                 this.menu.fillCraftSlotsStackedContents(this.stackedContents);
                 if (this.stackedContents.canCraft(recipe, (IntList)null)) {
@@ -79,7 +80,7 @@ public class ServerPlaceRecipe<C extends Container> implements PlaceRecipe<Integ
             int l = k;
 
             for(int m : intList) {
-                int n = StackedContents.fromStackingIndex(m).getMaxStackSize();
+                int n = StackedContents.maxStackSizeFromStackingIndex(m, this.stackedContents); // Paper
                 if (n < l) {
                     l = n;
                 }
@@ -96,10 +97,21 @@ public class ServerPlaceRecipe<C extends Container> implements PlaceRecipe<Integ
     @Override
     public void addItemToSlot(Iterator<Integer> inputs, int slot, int amount, int gridX, int gridY) {
         Slot slot2 = this.menu.getSlot(slot);
-        ItemStack itemStack = StackedContents.fromStackingIndex(inputs.next());
+        // Paper start
+        final int itemId = inputs.next();
+        ItemStack itemStack = null;
+        boolean isExact = false;
+        if (this.stackedContents.extrasMap != null && itemId >= net.minecraft.core.registries.BuiltInRegistries.ITEM.size()) {
+            itemStack = StackedContents.fromStackingIndexExtras(itemId, this.stackedContents.extrasMap).copy();
+            isExact = true;
+        }
+        if (itemStack == null) {
+            itemStack = StackedContents.fromStackingIndex(itemId);
+        }
+        // Paper end
         if (!itemStack.isEmpty()) {
             for(int i = 0; i < amount; ++i) {
-                this.moveItemToGrid(slot2, itemStack);
+                this.moveItemToGrid(slot2, itemStack, isExact); // Paper
             }
         }
 
@@ -129,8 +141,14 @@ public class ServerPlaceRecipe<C extends Container> implements PlaceRecipe<Integ
         return i;
     }
 
+    @Deprecated @io.papermc.paper.annotation.DoNotUse // Paper
     protected void moveItemToGrid(Slot slot, ItemStack stack) {
-        int i = this.inventory.findSlotMatchingUnusedItem(stack);
+        // Paper start
+        this.moveItemToGrid(slot, stack, false);
+    }
+    protected void moveItemToGrid(Slot slot, ItemStack stack, final boolean isExact) {
+        int i = isExact ? this.inventory.findSlotMatchingItem(stack) : this.inventory.findSlotMatchingUnusedItem(stack);
+        // Paper end
         if (i != -1) {
             ItemStack itemStack = this.inventory.getItem(i);
             if (!itemStack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index 574ebb3a2fcd0e4e426a8a7ee88d722ed3b9c3f5..35b0c28c2646bcfd284f091db95be18265abb92d 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -20,10 +20,17 @@ import net.minecraft.world.item.crafting.Recipe;
 public class StackedContents {
     private static final int EMPTY = 0;
     public final Int2IntMap contents = new Int2IntOpenHashMap();
+    @Nullable public io.papermc.paper.inventory.recipe.StackedContentsExtraMap extrasMap = null; // Paper
 
     public void accountSimpleStack(ItemStack stack) {
         if (!stack.isDamaged() && !stack.isEnchanted() && !stack.hasCustomHoverName()) {
             this.accountStack(stack);
+            // Paper start - account for all non-empty stacks
+        } else {
+            if (!stack.isEmpty() && this.extrasMap != null) {
+                this.extrasMap.accountStack(stack, Math.min(64, stack.getCount())); // max of 64 due to accountStack method below
+            }
+            // Paper end
         }
 
     }
@@ -37,6 +44,7 @@ public class StackedContents {
             int i = getStackingIndex(stack);
             int j = Math.min(maxCount, stack.getCount());
             this.put(i, j);
+            if (this.extrasMap != null) this.extrasMap.accountStack(stack, j); // Paper
         }
 
     }
@@ -59,7 +67,7 @@ public class StackedContents {
         }
     }
 
-    void put(int itemId, int count) {
+    public void put(int itemId, int count) { // Paper - package-private -> public
         this.contents.put(itemId, this.contents.get(itemId) + count);
     }
 
@@ -83,6 +91,23 @@ public class StackedContents {
         return itemId == 0 ? ItemStack.EMPTY : new ItemStack(Item.byId(itemId));
     }
 
+    // Paper start
+    public void initialize(final Recipe<?> recipe) {
+        this.extrasMap = new io.papermc.paper.inventory.recipe.StackedContentsExtraMap(this).initialize(recipe);
+    }
+
+    public static int maxStackSizeFromStackingIndex(final int itemId, @Nullable final StackedContents contents) {
+        if (contents != null && contents.extrasMap != null && itemId >= BuiltInRegistries.ITEM.size()) {
+            return fromStackingIndexExtras(itemId, contents.extrasMap).getMaxStackSize();
+        }
+        return fromStackingIndex(itemId).getMaxStackSize();
+    }
+
+    public static ItemStack fromStackingIndexExtras(final int itemId, final io.papermc.paper.inventory.recipe.StackedContentsExtraMap extrasMap) {
+        return extrasMap.getById(itemId).copy();
+    }
+    // Paper end
+
     public void clear() {
         this.contents.clear();
     }
@@ -106,7 +131,7 @@ public class StackedContents {
             this.data = new BitSet(this.ingredientCount + this.itemCount + this.ingredientCount + this.ingredientCount * this.itemCount);
 
             for(int i = 0; i < this.ingredients.size(); ++i) {
-                IntList intList = this.ingredients.get(i).getStackingIds();
+                IntList intList = this.getStackingIds(this.ingredients.get(i)); // Paper
 
                 for(int j = 0; j < this.itemCount; ++j) {
                     if (intList.contains(this.items[j])) {
@@ -171,7 +196,7 @@ public class StackedContents {
             IntCollection intCollection = new IntAVLTreeSet();
 
             for(Ingredient ingredient : this.ingredients) {
-                intCollection.addAll(ingredient.getStackingIds());
+                intCollection.addAll(this.getStackingIds(ingredient)); // Paper
             }
 
             IntIterator intIterator = intCollection.iterator();
@@ -294,7 +319,7 @@ public class StackedContents {
             for(Ingredient ingredient : this.ingredients) {
                 int j = 0;
 
-                for(int k : ingredient.getStackingIds()) {
+                for(int k : this.getStackingIds(ingredient)) { // Paper
                     j = Math.max(j, StackedContents.this.contents.get(k));
                 }
 
@@ -305,5 +330,17 @@ public class StackedContents {
 
             return i;
         }
+
+        // Paper start - improve exact recipe choices
+        private IntList getStackingIds(final Ingredient ingredient) {
+            if (StackedContents.this.extrasMap != null) {
+                final int[] ids = StackedContents.this.extrasMap.extraStackingIds.get(ingredient);
+                if (ids != null) {
+                    return new IntArrayList(ids);
+                }
+            }
+            return ingredient.getStackingIds();
+        }
+        // Paper end - improve exact recipe choices
     }
 }
diff --git a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
index 9c1e226dfea543c2685c887f068ded685a0e99e2..46e827ab997eb703efe20cb46e387197dcf3a266 100644
--- a/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/RecipeBookMenu.java
@@ -12,7 +12,7 @@ public abstract class RecipeBookMenu<C extends Container> extends AbstractContai
     }
 
     public void handlePlacement(boolean craftAll, Recipe<?> recipe, ServerPlayer player) {
-        (new ServerPlaceRecipe<>(this)).recipeClicked(player, recipe, craftAll);
+        (new ServerPlaceRecipe<>(this)).recipeClicked(player, (Recipe<C>) recipe, craftAll);
     }
 
     public abstract void fillCraftSlotsStackedContents(StackedContents finder);
diff --git a/src/main/java/net/minecraft/world/item/crafting/AbstractCookingRecipe.java b/src/main/java/net/minecraft/world/item/crafting/AbstractCookingRecipe.java
index f551651ce2d8b29c4a5cd787f48dedbbb411b2cb..e30af1e639db0c89066e76915884e1a0bef584a3 100644
--- a/src/main/java/net/minecraft/world/item/crafting/AbstractCookingRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/AbstractCookingRecipe.java
@@ -7,7 +7,7 @@ import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 
-public abstract class AbstractCookingRecipe implements Recipe<Container> {
+public abstract class AbstractCookingRecipe extends io.papermc.paper.inventory.recipe.RecipeBookExactChoiceRecipe<Container> implements Recipe<Container> { // Paper - improve exact recipe choices
     protected final RecipeType<?> type;
     protected final ResourceLocation id;
     private final CookingBookCategory category;
@@ -26,6 +26,7 @@ public abstract class AbstractCookingRecipe implements Recipe<Container> {
         this.result = output;
         this.experience = experience;
         this.cookingTime = cookTime;
+        this.checkExactIngredients(); // Paper - improve exact recipe choices
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/item/crafting/Recipe.java b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
index d1505698ce45bbc7f592a23111391542d01d2b28..f2cf1f30191e14c9e9b5b5e4a3f6d9346125e998 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Recipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
@@ -68,4 +68,10 @@ public interface Recipe<C extends Container> {
     }
 
     org.bukkit.inventory.Recipe toBukkitRecipe(); // CraftBukkit
+
+    // Paper start - improved exact choice recipes
+    default boolean hasExactIngredients() {
+        return false;
+    }
+    // Paper end
 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index 9c1285e31d947f92e0b00149e342e793898e0d7c..6693dd51440da3f0fc338c4e2cb67d3222eed182 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -30,7 +30,7 @@ import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
 import org.bukkit.inventory.RecipeChoice;
 // CraftBukkit end
 
-public class ShapedRecipe implements CraftingRecipe {
+public class ShapedRecipe extends io.papermc.paper.inventory.recipe.RecipeBookExactChoiceRecipe<CraftingContainer> implements CraftingRecipe { // Paper - improve exact recipe choices
 
     final int width;
     final int height;
@@ -50,6 +50,7 @@ public class ShapedRecipe implements CraftingRecipe {
         this.recipeItems = input;
         this.result = output;
         this.showNotification = showNotification;
+        this.checkExactIngredients(); // Paper - improve exact recipe choices
     }
 
     public ShapedRecipe(ResourceLocation id, String group, CraftingBookCategory category, int width, int height, NonNullList<Ingredient> input, ItemStack output) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
index 1023dcb80dfb978dd496ed0f96ca5832fadf0f87..2e60bdc44c33d434bfd9ca5bf8f75de799c6768c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -20,7 +20,7 @@ import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
 // CraftBukkit end
 
-public class ShapelessRecipe implements CraftingRecipe {
+public class ShapelessRecipe extends io.papermc.paper.inventory.recipe.RecipeBookExactChoiceRecipe<CraftingContainer> implements CraftingRecipe { // Paper - improve exact recipe choices
 
     private final ResourceLocation id;
     final String group;
@@ -34,6 +34,7 @@ public class ShapelessRecipe implements CraftingRecipe {
         this.category = category;
         this.result = output;
         this.ingredients = input;
+        this.checkExactIngredients(); // Paper - improve exact recipe choices
     }
 
     // CraftBukkit start
@@ -83,6 +84,7 @@ public class ShapelessRecipe implements CraftingRecipe {
 
     public boolean matches(CraftingContainer inventory, Level world) {
         StackedContents autorecipestackmanager = new StackedContents();
+        autorecipestackmanager.initialize(this); // Paper - better exact choice recipes
         int i = 0;
 
         for (int j = 0; j < inventory.getContainerSize(); ++j) {
